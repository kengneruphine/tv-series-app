{"version":3,"sources":["assets/loading.gif","components/SeriesList/index.js","components/Loader/index.js","components/Intro/index.js","containers/series/index.js","containers/SingleSeries/index.js","components/Main/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["module","exports","SeriesListItem","series","to","show","id","name","SeriesList","props","className","list","map","key","Loader","style","width","alt","src","loaderSrc","Intro","message","Series","state","seriesName","isFetching","onSeriesInputChange","e","setState","target","value","fetch","then","response","json","this","type","onChange","length","trim","Component","SingleSeries","match","params","premiered","rating","average","_embedded","episodes","image","medium","Main","exact","path","component","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.0abbf694.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.eb055ebe.gif\";","import React from 'react'\nimport './index.css'\nimport { Link} from 'react-router-dom'\n\nconst SeriesListItem = ({ series }) => {\n    return (\n        <li>\n            <Link to={`/series/${series.show.id}`}>\n            {series.show.name}\n            </Link>\n         </li>)\n    }\nconst SeriesList = (props) => {\n    return (\n        <div>\n            <ul className=\"series-list\">\n                {props.list.map(series => (\n                    <SeriesListItem series={series} key={series.show.id} />\n    ))}\n            </ul>\n        </div>\n    )\n}\n\nexport default SeriesList","import React from 'react'\nimport loaderSrc from '../../assets/loading.gif'\nconst Loader = props => {\n    return (\n        <div>\n            <img\n                style={{ width: 75 }}\n                alt=\"loading icon\"\n                src={loaderSrc}\n                />\n        </div>\n    )\n}\n\nexport default Loader","import React from 'react'\nconst Intro = (props) => {\n    return(\n    <p className=\"App-Intro\">\n        {props.message}\n      </p>\n    )\n}\n  \nexport default Intro","import React, { Component } from 'react'\nimport SeriesList from '../../components/SeriesList'\nimport Loader from '../../components/Loader'\nimport Intro from '../../components/Intro'\n\nclass Series extends Component{\n    state = {\n        series: [],\n        seriesName: '',\n        isFetching: false\n      }\n    onSeriesInputChange = e => {\n        this.setState({seriesName : e.target.value, isFetching:true})\n        fetch(`http://api.tvmaze.com/search/shows?q=${e.target.value}`)\n          .then(response => response.json())\n          .then(json => this.setState({ series: json, isFetching:false }) )\n    }\n    render() {\n        const { series, seriesName, isFetching } = this.state;\n        return (\n            <div>\n            <Intro message=\"Here you can find all of your most loved series\" />\n                <div>\n                    <input type=\"text\" value={seriesName} onChange={this.onSeriesInputChange} />\n                </div>\n                {\n                    !isFetching && series.length === 0 && seriesName.trim() === ''\n                    &&\n                     <p>Please enter series name into the input</p>\n                }\n                {\n                    !isFetching &&  series.length === 0 && seriesName.trim() !== ''\n                    &&\n                    <p> TV series has been found with the name</p>\n                }\n                {\n                    isFetching &&  <Loader />\n                }\n                {\n                    !isFetching && <SeriesList list={this.state.series}/>\n                }\n            </div>\n           \n        )\n    }\n}\n\nexport default Series","import React, { Component } from 'react'\nimport Loader from '../../components/Loader'\n\nclass SingleSeries extends Component{\n    state = {\n        show:null\n    }\n\n    componentDidMount() {\n        const { id } = this.props.match.params;\n\n        fetch(`http://api.tvmaze.com/shows/${id}?embed=episodes`)\n          .then(response => response.json())\n          .then(json => this.setState({ show:json}) )\n    }\n    render() {\n        const{ show} =this.state\n        return (\n            <div>\n                {show === null && <Loader />}\n                {show !== null\n                    &&\n                <div>\n                    <p>{show.name}</p>\n                    <p>Premiered - {show.premiered}</p>\n                    <p>Rating - {show.rating.average} </p>\n                    <p>Episodes - {show._embedded.episodes.length} </p>\n                    <p>\n                    <img alt=\"show\" src={show.image.medium} />\n                    </p>\n                </div>\n                }\n            </div>\n        )\n    }\n}\n\nexport default SingleSeries","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport Series from '../../containers/series'\nimport SingleSeries  from '../../containers/SingleSeries'\n\nconst Main = (props) => {\n    return (\n        <Switch>\n            <Route exact path=\"/\" component={Series} />\n            <Route path=\"/series/:id\" component={SingleSeries} />\n        </Switch>\n    )\n}\n\nexport default Main","import React, { Component } from 'react';\nimport './App.css';\nimport Main from '../../components/Main'\nimport 'whatwg-fetch'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Welcome to your favourite TV series page</h1>\n        </header>\n        <Main />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n    <BrowserRouter><App /> </BrowserRouter>,\n    document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}